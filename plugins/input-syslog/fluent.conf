# In v1 configuration, type and id are @ prefix parameters.
# @type and @id are recommended. type and id are still available for backward compatibility

## built-in TCP input
## $ echo <json> | fluent-cat <tag>

<source>
  @type forward
  @id forward_input
</source>

#################
## Input      ###
#################

<source>
    type syslog
    format newsyslog
    port "{{PORT_SYSLOG}}"
    bind 0.0.0.0
    include_source_host true
    tag jnpr_events
</source>

#################################
## Reformat syslog            ###
#################################
#The timestamp is the local time, in MMM DD HH:MM:SS format,
#of the device when the message was generated.  RFC 3164 does
#not specify the use of a time zone so there is no way for container
#to know the original timezone.
# Keep original timestamp in new key timestamp
<filter events.**>
    @type record_transformer
    remove_keys host,ident
    enable_ruby true
    <record>
        timestamp ${time}
        time ${Time.now.to_i}
        priority ${tag_parts[-1]}
        facility ${tag_parts[-2]}
        device ${host}
        daemon ${ident}
        event ${message.match(/^[A-Z\_]*/)[0].to_s}
  </record>
    renew_time_key time
</filter>

## Rewrite syslog tag to remove severity and facility
<match jnpr_events.**>
  @type rewrite_tag_filter
  #rewriterule1 message .*  events
  # 20220907 JES
  # new syntax
  <rule>
    key  message
    pattern  /.*/
    tag  events
  </rule>
</match>

#################
## Output     ###
#################

<match events.**>
    type copy
{% if OUTPUT_STDOUT == 'true' %}
    <store>
        @type stdout
        @id stdout_output
    </store>
{% endif %}
{% if OUTPUT_INFLUXDB == 'true' %}
    <store>
        type influxdb
        host "{{ INFLUXDB_ADDR }}"
        port "{{ INFLUXDB_PORT }}"
        dbname "{{ INFLUXDB_DB }}"
        user "{{ INFLUXDB_USER }}"
        password "{{ INFLUXDB_PWD }}"

        value_keys ["message"]
        ####
        buffer_type memory
        buffer_chunk_limit "{{ INFLUXDB_CHUNK_LIMIT }}"
        buffer_queue_limit "{{ INFLUXDB_QUEUE_LIMIT }}"
        flush_interval "{{ INFLUXDB_FLUSH_INTERVAL }}"
        # retry_limit 17
        # retry_wait 1.0
        num_threads "{{ INFLUXDB_NUM_THREADS }}"
    </store>
{% endif %}
{% if OUTPUT_MQTT == 'true' %}
    <store>
        type mqtt
        topic juniper

        ####
        buffer_type memory
        # buffer_chunk_limit 524288 # 512 * 1024
        # buffer_queue_limit 1024
        flush_interval 1s
        # retry_limit 17
        # retry_wait 1.0
        # num_threads 1
    </store>
{% endif %}
## TODO investigate forest plugin https://github.com/tagomoris/fluent-plugin-forest
{% if OUTPUT_KAFKA == 'true' %}
    <store>
      @type kafka

      # Brokers: you can choose either brokers or zookeeper.
      brokers               {{ KAFKA_ADDR }}:{{ KAFKA_PORT }}
      # zookeeper           <zookeeper_host>:<zookeeper_port> # Set brokers via Zookeeper

      default_topic         {{ KAFKA_TOPIC }}
      # default_partition_key (string)   :default => nil
      output_data_type      {{ KAFKA_DATA_TYPE }} # |ltsv|msgpack|attr:<record name>|<formatter name>)
      output_include_tag    false # |false) :default => false
      output_include_time   true # |false) :default => false

      # max_send_retries    (integer)    :default => 3
      # required_acks       (integer)    :default => 0
      # ack_timeout_ms      (integer)    :default => 1500
      # compression_codec   (none|gzip|snappy) :default => none
    </store>
{% endif %}
</match>

# <match monitor.**>
#     type copy
#     <store>
#         @type stdout
#         @id stdout_output
#     </store>
# {% if OUTPUT_INFLUXDB == 'true' %}
#     <store>
#         type influxdb
#         host "{{ INFLUXDB_ADDR }}"
#         port "{{ INFLUXDB_PORT }}"
#         dbname "{{ INFLUXDB_DB }}"
#         user "{{ INFLUXDB_USER }}"
#         password "{{ INFLUXDB_PWD }}"
#
#         value_keys ["message"]
#         ####
#         buffer_type memory
#         buffer_chunk_limit "{{ INFLUXDB_CHUNK_LIMIT }}"
#         buffer_queue_limit "{{ INFLUXDB_QUEUE_LIMIT }}"
#         flush_interval "{{ INFLUXDB_FLUSH_INTERVAL }}"
#         # retry_limit 17
#         # retry_wait 1.0
#         num_threads "{{ INFLUXDB_NUM_THREADS }}"
#     </store>
# {% endif %}
# </match>

# Listen HTTP for monitoring
# http://localhost:24220/api/plugins
# http://localhost:24220/api/plugins?type=TYPE
# http://localhost:24220/api/plugins?tag=MYTAG
<source>
  @type monitor_agent
  @id monitor_agent_input
  # tag monitor.metrics
  port 24220
</source>

# Listen DRb for debug
<source>
  @type debug_agent
  @id debug_agent_input
  bind 127.0.0.1
  port 24230
</source>

## match tag=debug.** and dump to console
<match debug.**>
  @type stdout
  @id stdout_output
</match>

# match fluent's internal events
<match fluent.**>
  @type stdout
</match>
